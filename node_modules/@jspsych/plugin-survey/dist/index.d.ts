import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from "jspsych";
declare const info: {
    readonly name: "survey";
    readonly parameters: {
        readonly pages: {
            readonly type: ParameterType.COMPLEX;
            readonly default: any;
            readonly pretty_name: "Pages";
            readonly array: true;
            readonly nested: {
                /** Question type: one of "drop-down", "html", "likert", "likert-table", "multi-choice", "multi-select", "ranking", "text" */
                readonly type: {
                    readonly type: ParameterType.SELECT;
                    readonly pretty_name: "Type";
                    readonly default: any;
                    readonly options: readonly ["drop-down", "html", "likert", "likert-table", "multi-choice", "multi-select", "ranking", "text"];
                };
                /** Question prompt. */
                readonly prompt: {
                    readonly type: ParameterType.HTML_STRING;
                    readonly pretty_name: "Prompt";
                    readonly default: any;
                };
                /** Whether or not a response to this question must be given in order to continue. For likert-table questions, this applies to all statements in the table. */
                readonly required: {
                    readonly type: ParameterType.BOOL;
                    readonly pretty_name: "Required";
                    readonly default: false;
                };
                /** Name of the question in the trial data. If no name is given, the questions are named P0_Q0, P0_Q1, etc. Names must be unique across pages. */
                readonly name: {
                    readonly type: ParameterType.STRING;
                    readonly pretty_name: "Question Name";
                    readonly default: "";
                };
                /**
                 * Likert only: Array of objects that defines the rating scale values.
                 * Each object defines a single rating option and must have a "value" property (integer or string).
                 * Each object can optionally have a "text" property (string) that contains a different text label that should be displayed for the rating option.
                 * If this array is not provided, then the likert_scale_min/max/stepsize values will be used to generate the scale.
                 */
                readonly likert_scale_values: {
                    readonly type: ParameterType.COMPLEX;
                    readonly pretty_name: "Likert scale values";
                    readonly default: any;
                    readonly array: true;
                };
                /** Likert only: Minimum rating scale value. */
                readonly likert_scale_min: {
                    readonly type: ParameterType.INT;
                    readonly pretty_name: "Likert scale min";
                    readonly default: 1;
                };
                /** Likert only: Maximum rating scale value. */
                readonly likert_scale_max: {
                    readonly type: ParameterType.INT;
                    readonly pretty_name: "Likert scale max";
                    readonly default: 5;
                };
                /** Likert only: Step size for generating rating scale values between the minimum and maximum. */
                readonly likert_scale_stepsize: {
                    readonly type: ParameterType.INT;
                    readonly pretty_name: "Likert scale step size";
                    readonly default: 1;
                };
                /** Likert only: Text description to be shown for the minimum (first) rating option. */
                readonly likert_scale_min_label: {
                    readonly type: ParameterType.STRING;
                    readonly pretty_name: "Likert scale min label";
                    readonly default: any;
                };
                /** Likert only: Text description to be shown for the maximum (last) rating option. */
                readonly likert_scale_max_label: {
                    readonly type: ParameterType.STRING;
                    readonly pretty_name: "Likert scale max label";
                    readonly default: any;
                };
                /** Likert-table only: array of objects, where each object represents a single statement/question to be displayed in a table row. */
                readonly statements: {
                    readonly type: ParameterType.COMPLEX;
                    readonly pretty_name: "Statements";
                    readonly array: true;
                    readonly default: any;
                    readonly nested: {
                        /** Statement text */
                        readonly prompt: {
                            readonly type: ParameterType.STRING;
                            readonly pretty_name: "Prompt";
                            readonly default: any;
                        };
                        /** Identifier for the statement in the trial data. If none is given, the statements will be named "S0", "S1", etc.  */
                        readonly name: {
                            readonly type: ParameterType.STRING;
                            readonly pretty_name: "Name";
                            readonly default: any;
                        };
                    };
                };
                /** Likert-table only: Whether or not to randomize the order of statements (rows) in the likert table. */
                readonly randomize_statement_order: {
                    readonly type: ParameterType.BOOL;
                    readonly pretty_name: "Randomize statement order";
                    readonly default: false;
                };
                /**
                 * Drop-down only: Text to be displayed in the drop-down menu as a prompt for making a selection.
                 * This text is not a valid answer, so submitting this selection will produce an error if a response is required.
                 * For a blank prompt, use a space character (" ").
                 */
                readonly dropdown_select_prompt: {
                    readonly type: ParameterType.STRING;
                    readonly pretty_name: "Drop-down select prompt";
                    readonly default: "Choose...";
                };
                /** Drop-down/multi-choice/multi-select/likert-table/ranking only: Array of strings that contains the set of multiple choice options to display for the question. */
                readonly options: {
                    readonly type: ParameterType.STRING;
                    readonly pretty_name: "Options";
                    readonly default: any;
                    readonly array: true;
                };
                /** Drop-down/multi-choice/multi-select/ranking only: re-ordering of options array */
                readonly option_reorder: {
                    readonly type: ParameterType.SELECT;
                    readonly pretty_name: "Option reorder";
                    readonly options: readonly ["none", "asc", "desc", "random"];
                    readonly default: "none";
                };
                /**
                 * Multi-choice/multi-select only: The number of columns that should be used for displaying the options.
                 * If 1 (default), the choices will be displayed in a single column (vertically).
                 * If 0, choices will be displayed in a single row (horizontally).
                 * Any value greater than 1 can be used to display options in multiple columns.
                 */
                readonly columns: {
                    readonly type: ParameterType.INT;
                    readonly pretty_name: "Columns";
                    readonly default: 1;
                };
                /**
                 * Drop-down/multi-choice/multi-select/ranking only: Whether or not to include an additional "other" option.
                 * If true, an "other" radio/checkbox option will be added on to the list multi-choice/multi-select options.
                 * Selecting this option will automatically produce a textbox to allow the participant to write in a response.
                 */
                readonly add_other_option: {
                    readonly type: ParameterType.BOOL;
                    readonly pretty_name: "Add other option";
                    readonly default: false;
                };
                /** Drop-down/multi-choice/multi-select/ranking only: If add_other_option is true, then this is the text label for the "other" option. */
                readonly other_option_text: {
                    readonly type: ParameterType.BOOL;
                    readonly pretty_name: "Other option text";
                    readonly default: "Other";
                };
                /** Text only: Placeholder text in the response text box. */
                readonly placeholder: {
                    readonly type: ParameterType.STRING;
                    readonly pretty_name: "Placeholder";
                    readonly default: "";
                };
                /** Text only: The number of rows (height) for the response text box. */
                readonly textbox_rows: {
                    readonly type: ParameterType.INT;
                    readonly pretty_name: "Textbox rows";
                    readonly default: 1;
                };
                /** Text only: The number of columns (width) for the response text box. */
                readonly textbox_columns: {
                    readonly type: ParameterType.INT;
                    readonly pretty_name: "Textbox columns";
                    readonly default: 40;
                };
                /**
                 * Text only: Type for the HTML <input> element.
                 * The `input_type` parameter must be one of "color", "date", "datetime-local", "email", "month", "number", "password", "range", "tel", "text", "time", "url", "week".
                 * If the `textbox_rows` parameter is larger than 1, the `input_type` parameter will be ignored.
                 * The `textbox_columns` parameter only affects questions with `input_type` "email", "password", "tel", "url", or "text".
                 */
                readonly input_type: {
                    readonly type: ParameterType.SELECT;
                    readonly pretty_name: "Input type";
                    readonly default: "text";
                    readonly options: readonly ["color", "date", "datetime-local", "email", "month", "number", "password", "range", "tel", "text", "time", "url", "week"];
                };
                /**
                 * All question types except HTML: value of the correct response. If specified, the response will be compared to this value,
                 * and an additional data property "correct" will store response accuracy (true or false).
                 */
                readonly correct_response: {
                    readonly type: ParameterType.STRING;
                    readonly pretty_name: "Correct response";
                    readonly default: any;
                };
            };
        };
        /** Whether or not to randomize the question order on each page */
        readonly randomize_question_order: {
            readonly type: ParameterType.BOOL;
            readonly pretty_name: "Randomize question order";
            readonly default: false;
        };
        /** Label of the button to move forward thorugh survey pages. */
        readonly button_label_next: {
            readonly type: ParameterType.STRING;
            readonly pretty_name: "Next button label";
            readonly default: "Next";
        };
        /** Label of the button to move backward through survey pages. */
        readonly button_label_back: {
            readonly type: ParameterType.STRING;
            readonly pretty_name: "Back button label";
            readonly default: "Back";
        };
        /** Label of the button to submit responses. */
        readonly button_label_finish: {
            readonly type: ParameterType.STRING;
            readonly pretty_name: "Finish button label";
            readonly default: "Finish";
        };
        /** Setting this to true will enable browser auto-complete or auto-fill for the form. */
        readonly autocomplete: {
            readonly type: ParameterType.BOOL;
            readonly pretty_name: "Allow autocomplete";
            readonly default: false;
        };
        /**
         * Whether or not to show numbers next to each question prompt. Options are:
         * "on": questions will be labelled starting with "1." on the first page, and numbering will continue across pages.
         * "onPage": questions will be labelled starting with "1.", with separate numbering on each page.
         * "off": no question numbering.
         */
        readonly show_question_numbers: {
            readonly type: ParameterType.SELECT;
            readonly pretty_name: "Show question numbers";
            readonly default: "off";
            readonly options: readonly ["on", "onPage", "off"];
        };
        /**
         * HTML-formatted text to be shown at the top of the survey pages. This also provides a method for fixing any arbitrary text to the top of the page when
         * randomizing the question order, since HTML question types are also randomized.
         */
        readonly title: {
            readonly type: ParameterType.STRING;
            readonly pretty_name: "Title";
            readonly default: any;
        };
        /** Text to display if a required answer is not responded to. */
        readonly required_error_text: {
            readonly type: ParameterType.STRING;
            readonly pretty_name: "Required error text";
            readonly default: "Please answer the question.";
        };
        /** String to display at the end of required questions. */
        readonly required_question_label: {
            readonly type: ParameterType.STRING;
            readonly pretty_name: "Required question label";
            readonly default: "*";
        };
    };
};
declare type Info = typeof info;
/**
 * **survey**
 *
 * jsPsych plugin for presenting survey questions (questionnaires) - SurveyJS version
 *
 * @author Becky Gilbert
 * @see {@link https://www.jspsych.org/plugins/survey/ survey plugin documentation on jspsych.org}
 */
declare class SurveyPlugin implements JsPsychPlugin<Info> {
    private jsPsych;
    static info: {
        readonly name: "survey";
        readonly parameters: {
            readonly pages: {
                readonly type: ParameterType.COMPLEX;
                readonly default: any;
                readonly pretty_name: "Pages";
                readonly array: true;
                readonly nested: {
                    /** Question type: one of "drop-down", "html", "likert", "likert-table", "multi-choice", "multi-select", "ranking", "text" */
                    readonly type: {
                        readonly type: ParameterType.SELECT;
                        readonly pretty_name: "Type";
                        readonly default: any;
                        readonly options: readonly ["drop-down", "html", "likert", "likert-table", "multi-choice", "multi-select", "ranking", "text"];
                    };
                    /** Question prompt. */
                    readonly prompt: {
                        readonly type: ParameterType.HTML_STRING;
                        readonly pretty_name: "Prompt";
                        readonly default: any;
                    };
                    /** Whether or not a response to this question must be given in order to continue. For likert-table questions, this applies to all statements in the table. */
                    readonly required: {
                        readonly type: ParameterType.BOOL;
                        readonly pretty_name: "Required";
                        readonly default: false;
                    };
                    /** Name of the question in the trial data. If no name is given, the questions are named P0_Q0, P0_Q1, etc. Names must be unique across pages. */
                    readonly name: {
                        readonly type: ParameterType.STRING;
                        readonly pretty_name: "Question Name";
                        readonly default: "";
                    };
                    /**
                     * Likert only: Array of objects that defines the rating scale values.
                     * Each object defines a single rating option and must have a "value" property (integer or string).
                     * Each object can optionally have a "text" property (string) that contains a different text label that should be displayed for the rating option.
                     * If this array is not provided, then the likert_scale_min/max/stepsize values will be used to generate the scale.
                     */
                    readonly likert_scale_values: {
                        readonly type: ParameterType.COMPLEX;
                        readonly pretty_name: "Likert scale values";
                        readonly default: any;
                        readonly array: true;
                    };
                    /** Likert only: Minimum rating scale value. */
                    readonly likert_scale_min: {
                        readonly type: ParameterType.INT;
                        readonly pretty_name: "Likert scale min";
                        readonly default: 1;
                    };
                    /** Likert only: Maximum rating scale value. */
                    readonly likert_scale_max: {
                        readonly type: ParameterType.INT;
                        readonly pretty_name: "Likert scale max";
                        readonly default: 5;
                    };
                    /** Likert only: Step size for generating rating scale values between the minimum and maximum. */
                    readonly likert_scale_stepsize: {
                        readonly type: ParameterType.INT;
                        readonly pretty_name: "Likert scale step size";
                        readonly default: 1;
                    };
                    /** Likert only: Text description to be shown for the minimum (first) rating option. */
                    readonly likert_scale_min_label: {
                        readonly type: ParameterType.STRING;
                        readonly pretty_name: "Likert scale min label";
                        readonly default: any;
                    };
                    /** Likert only: Text description to be shown for the maximum (last) rating option. */
                    readonly likert_scale_max_label: {
                        readonly type: ParameterType.STRING;
                        readonly pretty_name: "Likert scale max label";
                        readonly default: any;
                    };
                    /** Likert-table only: array of objects, where each object represents a single statement/question to be displayed in a table row. */
                    readonly statements: {
                        readonly type: ParameterType.COMPLEX;
                        readonly pretty_name: "Statements";
                        readonly array: true;
                        readonly default: any;
                        readonly nested: {
                            /** Statement text */
                            readonly prompt: {
                                readonly type: ParameterType.STRING;
                                readonly pretty_name: "Prompt";
                                readonly default: any;
                            };
                            /** Identifier for the statement in the trial data. If none is given, the statements will be named "S0", "S1", etc.  */
                            readonly name: {
                                readonly type: ParameterType.STRING;
                                readonly pretty_name: "Name";
                                readonly default: any;
                            };
                        };
                    };
                    /** Likert-table only: Whether or not to randomize the order of statements (rows) in the likert table. */
                    readonly randomize_statement_order: {
                        readonly type: ParameterType.BOOL;
                        readonly pretty_name: "Randomize statement order";
                        readonly default: false;
                    };
                    /**
                     * Drop-down only: Text to be displayed in the drop-down menu as a prompt for making a selection.
                     * This text is not a valid answer, so submitting this selection will produce an error if a response is required.
                     * For a blank prompt, use a space character (" ").
                     */
                    readonly dropdown_select_prompt: {
                        readonly type: ParameterType.STRING;
                        readonly pretty_name: "Drop-down select prompt";
                        readonly default: "Choose...";
                    };
                    /** Drop-down/multi-choice/multi-select/likert-table/ranking only: Array of strings that contains the set of multiple choice options to display for the question. */
                    readonly options: {
                        readonly type: ParameterType.STRING;
                        readonly pretty_name: "Options";
                        readonly default: any;
                        readonly array: true;
                    };
                    /** Drop-down/multi-choice/multi-select/ranking only: re-ordering of options array */
                    readonly option_reorder: {
                        readonly type: ParameterType.SELECT;
                        readonly pretty_name: "Option reorder";
                        readonly options: readonly ["none", "asc", "desc", "random"];
                        readonly default: "none";
                    };
                    /**
                     * Multi-choice/multi-select only: The number of columns that should be used for displaying the options.
                     * If 1 (default), the choices will be displayed in a single column (vertically).
                     * If 0, choices will be displayed in a single row (horizontally).
                     * Any value greater than 1 can be used to display options in multiple columns.
                     */
                    readonly columns: {
                        readonly type: ParameterType.INT;
                        readonly pretty_name: "Columns";
                        readonly default: 1;
                    };
                    /**
                     * Drop-down/multi-choice/multi-select/ranking only: Whether or not to include an additional "other" option.
                     * If true, an "other" radio/checkbox option will be added on to the list multi-choice/multi-select options.
                     * Selecting this option will automatically produce a textbox to allow the participant to write in a response.
                     */
                    readonly add_other_option: {
                        readonly type: ParameterType.BOOL;
                        readonly pretty_name: "Add other option";
                        readonly default: false;
                    };
                    /** Drop-down/multi-choice/multi-select/ranking only: If add_other_option is true, then this is the text label for the "other" option. */
                    readonly other_option_text: {
                        readonly type: ParameterType.BOOL;
                        readonly pretty_name: "Other option text";
                        readonly default: "Other";
                    };
                    /** Text only: Placeholder text in the response text box. */
                    readonly placeholder: {
                        readonly type: ParameterType.STRING;
                        readonly pretty_name: "Placeholder";
                        readonly default: "";
                    };
                    /** Text only: The number of rows (height) for the response text box. */
                    readonly textbox_rows: {
                        readonly type: ParameterType.INT;
                        readonly pretty_name: "Textbox rows";
                        readonly default: 1;
                    };
                    /** Text only: The number of columns (width) for the response text box. */
                    readonly textbox_columns: {
                        readonly type: ParameterType.INT;
                        readonly pretty_name: "Textbox columns";
                        readonly default: 40;
                    };
                    /**
                     * Text only: Type for the HTML <input> element.
                     * The `input_type` parameter must be one of "color", "date", "datetime-local", "email", "month", "number", "password", "range", "tel", "text", "time", "url", "week".
                     * If the `textbox_rows` parameter is larger than 1, the `input_type` parameter will be ignored.
                     * The `textbox_columns` parameter only affects questions with `input_type` "email", "password", "tel", "url", or "text".
                     */
                    readonly input_type: {
                        readonly type: ParameterType.SELECT;
                        readonly pretty_name: "Input type";
                        readonly default: "text";
                        readonly options: readonly ["color", "date", "datetime-local", "email", "month", "number", "password", "range", "tel", "text", "time", "url", "week"];
                    };
                    /**
                     * All question types except HTML: value of the correct response. If specified, the response will be compared to this value,
                     * and an additional data property "correct" will store response accuracy (true or false).
                     */
                    readonly correct_response: {
                        readonly type: ParameterType.STRING;
                        readonly pretty_name: "Correct response";
                        readonly default: any;
                    };
                };
            };
            /** Whether or not to randomize the question order on each page */
            readonly randomize_question_order: {
                readonly type: ParameterType.BOOL;
                readonly pretty_name: "Randomize question order";
                readonly default: false;
            };
            /** Label of the button to move forward thorugh survey pages. */
            readonly button_label_next: {
                readonly type: ParameterType.STRING;
                readonly pretty_name: "Next button label";
                readonly default: "Next";
            };
            /** Label of the button to move backward through survey pages. */
            readonly button_label_back: {
                readonly type: ParameterType.STRING;
                readonly pretty_name: "Back button label";
                readonly default: "Back";
            };
            /** Label of the button to submit responses. */
            readonly button_label_finish: {
                readonly type: ParameterType.STRING;
                readonly pretty_name: "Finish button label";
                readonly default: "Finish";
            };
            /** Setting this to true will enable browser auto-complete or auto-fill for the form. */
            readonly autocomplete: {
                readonly type: ParameterType.BOOL;
                readonly pretty_name: "Allow autocomplete";
                readonly default: false;
            };
            /**
             * Whether or not to show numbers next to each question prompt. Options are:
             * "on": questions will be labelled starting with "1." on the first page, and numbering will continue across pages.
             * "onPage": questions will be labelled starting with "1.", with separate numbering on each page.
             * "off": no question numbering.
             */
            readonly show_question_numbers: {
                readonly type: ParameterType.SELECT;
                readonly pretty_name: "Show question numbers";
                readonly default: "off";
                readonly options: readonly ["on", "onPage", "off"];
            };
            /**
             * HTML-formatted text to be shown at the top of the survey pages. This also provides a method for fixing any arbitrary text to the top of the page when
             * randomizing the question order, since HTML question types are also randomized.
             */
            readonly title: {
                readonly type: ParameterType.STRING;
                readonly pretty_name: "Title";
                readonly default: any;
            };
            /** Text to display if a required answer is not responded to. */
            readonly required_error_text: {
                readonly type: ParameterType.STRING;
                readonly pretty_name: "Required error text";
                readonly default: "Please answer the question.";
            };
            /** String to display at the end of required questions. */
            readonly required_question_label: {
                readonly type: ParameterType.STRING;
                readonly pretty_name: "Required question label";
                readonly default: "*";
            };
        };
    };
    private survey;
    private trial_data;
    constructor(jsPsych: JsPsych);
    applyStyles(): void;
    trial(display_element: HTMLElement, trial: TrialType<Info>): void;
    /**
     * Validate parameters for any question type
     *
     * @param supplied
     * @param required
     * @param optional
     * @returns
     */
    private static validate_question_params;
    /**
     * Set defaults for undefined question-specific parameters
     **/
    private static set_question_defaults;
    private setup_dropdown_question;
    private setup_html_question;
    private setup_likert_question;
    private setup_likert_table_question;
    private setup_multichoice_question;
    private setup_text_question;
}
export default SurveyPlugin;
